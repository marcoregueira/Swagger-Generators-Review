/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { UserAsignationModel } from './user-asignation-model.model';
import { CustomFieldItemModel } from './custom-field-item-model.model';

export interface IActivityItemModel {
    id?: number;
    code?: string;
    name?: string;
    reasonId?: number;
    reasonName?: string;
    customerTypeId?: number;
    customerTypeName?: string;
    articleTypeId?: number;
    articleTypeName?: string;
    users?: Array<UserAsignationModel>;
    customFields?: Array<CustomFieldItemModel>;
    startDate?: Date;
    endDate?: Date;
}


export class ActivityItemModel extends BaseModel implements IActivityItemModel  {

    static ID_FIELD_NAME = 'id';
    static CODE_FIELD_NAME = 'code';
    static NAME_FIELD_NAME = 'name';
    static REASON_ID_FIELD_NAME = 'reasonId';
    static REASON_NAME_FIELD_NAME = 'reasonName';
    static CUSTOMER_TYPE_ID_FIELD_NAME = 'customerTypeId';
    static CUSTOMER_TYPE_NAME_FIELD_NAME = 'customerTypeName';
    static ARTICLE_TYPE_ID_FIELD_NAME = 'articleTypeId';
    static ARTICLE_TYPE_NAME_FIELD_NAME = 'articleTypeName';
    static USERS_FIELD_NAME = 'users';
    static CUSTOM_FIELDS_FIELD_NAME = 'customFields';
    static START_DATE_FIELD_NAME = 'startDate';
    static END_DATE_FIELD_NAME = 'endDate';

    id: number;
    code: string;
    name: string;
    reasonId: number;
    reasonName: string;
    customerTypeId: number;
    customerTypeName: string;
    articleTypeId: number;
    articleTypeName: string;
    users: Array<UserAsignationModel>;
    customFields: Array<CustomFieldItemModel>;
    startDate: Date;
    endDate: Date;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.users = new Array<UserAsignationModel>(); 
        this.customFields = new Array<CustomFieldItemModel>(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.id = rawValues.id;
            this.code = rawValues.code;
            this.name = rawValues.name;
            this.reasonId = rawValues.reasonId;
            this.reasonName = rawValues.reasonName;
            this.customerTypeId = rawValues.customerTypeId;
            this.customerTypeName = rawValues.customerTypeName;
            this.articleTypeId = rawValues.articleTypeId;
            this.articleTypeName = rawValues.articleTypeName;
            this.fillModelArray<UserAsignationModel>(this, ActivityItemModel.USERS_FIELD_NAME, rawValues.users, useFormGroupValuesToModel, UserAsignationModel, SubTypeFactory.createSubTypeInstance);
            this.fillModelArray<CustomFieldItemModel>(this, ActivityItemModel.CUSTOM_FIELDS_FIELD_NAME, rawValues.customFields, useFormGroupValuesToModel, CustomFieldItemModel, SubTypeFactory.createSubTypeInstance);
            this.startDate = rawValues.startDate;
            this.endDate = rawValues.endDate;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                id: new FormControl(this.id),
                code: new FormControl(this.code),
                name: new FormControl(this.name),
                reasonId: new FormControl(this.reasonId),
                reasonName: new FormControl(this.reasonName),
                customerTypeId: new FormControl(this.customerTypeId),
                customerTypeName: new FormControl(this.customerTypeName),
                articleTypeId: new FormControl(this.articleTypeId),
                articleTypeName: new FormControl(this.articleTypeName),
                users: new FormArray([]),
                customFields: new FormArray([]),
                startDate: new FormControl(this.startDate),
                endDate: new FormControl(this.endDate),
            });
            // generate FormArray control elements
            this.fillFormArray<UserAsignationModel>(ActivityItemModel.USERS_FIELD_NAME, this.users, UserAsignationModel);
            // generate FormArray control elements
            this.fillFormArray<CustomFieldItemModel>(ActivityItemModel.CUSTOM_FIELDS_FIELD_NAME, this.customFields, CustomFieldItemModel);
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls[ActivityItemModel.ID_FIELD_NAME].setValue(this.id);
        this.$formGroup.controls[ActivityItemModel.CODE_FIELD_NAME].setValue(this.code);
        this.$formGroup.controls[ActivityItemModel.NAME_FIELD_NAME].setValue(this.name);
        this.$formGroup.controls[ActivityItemModel.REASON_ID_FIELD_NAME].setValue(this.reasonId);
        this.$formGroup.controls[ActivityItemModel.REASON_NAME_FIELD_NAME].setValue(this.reasonName);
        this.$formGroup.controls[ActivityItemModel.CUSTOMER_TYPE_ID_FIELD_NAME].setValue(this.customerTypeId);
        this.$formGroup.controls[ActivityItemModel.CUSTOMER_TYPE_NAME_FIELD_NAME].setValue(this.customerTypeName);
        this.$formGroup.controls[ActivityItemModel.ARTICLE_TYPE_ID_FIELD_NAME].setValue(this.articleTypeId);
        this.$formGroup.controls[ActivityItemModel.ARTICLE_TYPE_NAME_FIELD_NAME].setValue(this.articleTypeName);
        this.fillFormArray<UserAsignationModel>(ActivityItemModel.USERS_FIELD_NAME, this.users, UserAsignationModel);
        this.fillFormArray<CustomFieldItemModel>(ActivityItemModel.CUSTOM_FIELDS_FIELD_NAME, this.customFields, CustomFieldItemModel);
        this.$formGroup.controls[ActivityItemModel.START_DATE_FIELD_NAME].setValue(this.startDate);
        this.$formGroup.controls[ActivityItemModel.END_DATE_FIELD_NAME].setValue(this.endDate);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

