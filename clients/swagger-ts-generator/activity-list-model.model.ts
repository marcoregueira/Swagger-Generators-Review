/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { ActivityListItemModel } from './activity-list-item-model.model';

export interface IActivityListModel {
    activities?: Array<ActivityListItemModel>;
    operatorId?: number;
    reasonId?: number;
    clientTypeId?: number;
    articleTypeId?: number;
    filterDate?: Date;
    onlyActive?: boolean;
    filter?: string;
    formAction?: string;
    itemsPerPage?: number;
    itemsCount?: number;
    pageIndex?: number;
    pageCount?: number;
    newSort?: string;
}


export class ActivityListModel extends BaseModel implements IActivityListModel  {

    static ACTIVITIES_FIELD_NAME = 'activities';
    static OPERATOR_ID_FIELD_NAME = 'operatorId';
    static REASON_ID_FIELD_NAME = 'reasonId';
    static CLIENT_TYPE_ID_FIELD_NAME = 'clientTypeId';
    static ARTICLE_TYPE_ID_FIELD_NAME = 'articleTypeId';
    static FILTER_DATE_FIELD_NAME = 'filterDate';
    static ONLY_ACTIVE_FIELD_NAME = 'onlyActive';
    static FILTER_FIELD_NAME = 'filter';
    static FORM_ACTION_FIELD_NAME = 'formAction';
    static ITEMS_PER_PAGE_FIELD_NAME = 'itemsPerPage';
    static ITEMS_COUNT_FIELD_NAME = 'itemsCount';
    static PAGE_INDEX_FIELD_NAME = 'pageIndex';
    static PAGE_COUNT_FIELD_NAME = 'pageCount';
    static NEW_SORT_FIELD_NAME = 'newSort';

    activities: Array<ActivityListItemModel>;
    operatorId: number;
    reasonId: number;
    clientTypeId: number;
    articleTypeId: number;
    filterDate: Date;
    onlyActive: boolean;
    filter: string;
    formAction: string;
    itemsPerPage: number;
    itemsCount: number;
    pageIndex: number;
    pageCount: number;
    newSort: string;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.activities = new Array<ActivityListItemModel>(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.fillModelArray<ActivityListItemModel>(this, ActivityListModel.ACTIVITIES_FIELD_NAME, rawValues.activities, useFormGroupValuesToModel, ActivityListItemModel, SubTypeFactory.createSubTypeInstance);
            this.operatorId = rawValues.operatorId;
            this.reasonId = rawValues.reasonId;
            this.clientTypeId = rawValues.clientTypeId;
            this.articleTypeId = rawValues.articleTypeId;
            this.filterDate = rawValues.filterDate;
            this.onlyActive = rawValues.onlyActive;
            this.filter = rawValues.filter;
            this.formAction = rawValues.formAction;
            this.itemsPerPage = rawValues.itemsPerPage;
            this.itemsCount = rawValues.itemsCount;
            this.pageIndex = rawValues.pageIndex;
            this.pageCount = rawValues.pageCount;
            this.newSort = rawValues.newSort;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                activities: new FormArray([]),
                operatorId: new FormControl(this.operatorId),
                reasonId: new FormControl(this.reasonId),
                clientTypeId: new FormControl(this.clientTypeId),
                articleTypeId: new FormControl(this.articleTypeId),
                filterDate: new FormControl(this.filterDate),
                onlyActive: new FormControl(this.onlyActive),
                filter: new FormControl(this.filter),
                formAction: new FormControl(this.formAction),
                itemsPerPage: new FormControl(this.itemsPerPage),
                itemsCount: new FormControl(this.itemsCount),
                pageIndex: new FormControl(this.pageIndex),
                pageCount: new FormControl(this.pageCount),
                newSort: new FormControl(this.newSort),
            });
            // generate FormArray control elements
            this.fillFormArray<ActivityListItemModel>(ActivityListModel.ACTIVITIES_FIELD_NAME, this.activities, ActivityListItemModel);
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.fillFormArray<ActivityListItemModel>(ActivityListModel.ACTIVITIES_FIELD_NAME, this.activities, ActivityListItemModel);
        this.$formGroup.controls[ActivityListModel.OPERATOR_ID_FIELD_NAME].setValue(this.operatorId);
        this.$formGroup.controls[ActivityListModel.REASON_ID_FIELD_NAME].setValue(this.reasonId);
        this.$formGroup.controls[ActivityListModel.CLIENT_TYPE_ID_FIELD_NAME].setValue(this.clientTypeId);
        this.$formGroup.controls[ActivityListModel.ARTICLE_TYPE_ID_FIELD_NAME].setValue(this.articleTypeId);
        this.$formGroup.controls[ActivityListModel.FILTER_DATE_FIELD_NAME].setValue(this.filterDate);
        this.$formGroup.controls[ActivityListModel.ONLY_ACTIVE_FIELD_NAME].setValue(this.onlyActive);
        this.$formGroup.controls[ActivityListModel.FILTER_FIELD_NAME].setValue(this.filter);
        this.$formGroup.controls[ActivityListModel.FORM_ACTION_FIELD_NAME].setValue(this.formAction);
        this.$formGroup.controls[ActivityListModel.ITEMS_PER_PAGE_FIELD_NAME].setValue(this.itemsPerPage);
        this.$formGroup.controls[ActivityListModel.ITEMS_COUNT_FIELD_NAME].setValue(this.itemsCount);
        this.$formGroup.controls[ActivityListModel.PAGE_INDEX_FIELD_NAME].setValue(this.pageIndex);
        this.$formGroup.controls[ActivityListModel.PAGE_COUNT_FIELD_NAME].setValue(this.pageCount);
        this.$formGroup.controls[ActivityListModel.NEW_SORT_FIELD_NAME].setValue(this.newSort);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

