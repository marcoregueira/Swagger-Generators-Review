/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { ControlResponse } from './control-response.model';
import { ControlInfoData } from './control-info-data.model';

export interface IActivityDataCloseModel {
    userId?: number;
    userName?: string;
    activityDataId?: number;
    controlResponses?: Array<ControlResponse>;
    projectId?: number;
    activityName?: string;
    start?: Date;
    comments?: string;
    reasonId?: number;
    reasonName?: string;
    clientTypeId?: number;
    clientTypeName?: string;
    articleTypeId?: number;
    articleTypeName?: string;
    controlInfo?: ControlInfoData;
}


export class ActivityDataCloseModel extends BaseModel implements IActivityDataCloseModel  {

    static USER_ID_FIELD_NAME = 'userId';
    static USER_NAME_FIELD_NAME = 'userName';
    static ACTIVITY_DATA_ID_FIELD_NAME = 'activityDataId';
    static CONTROL_RESPONSES_FIELD_NAME = 'controlResponses';
    static PROJECT_ID_FIELD_NAME = 'projectId';
    static ACTIVITY_NAME_FIELD_NAME = 'activityName';
    static START_FIELD_NAME = 'start';
    static COMMENTS_FIELD_NAME = 'comments';
    static REASON_ID_FIELD_NAME = 'reasonId';
    static REASON_NAME_FIELD_NAME = 'reasonName';
    static CLIENT_TYPE_ID_FIELD_NAME = 'clientTypeId';
    static CLIENT_TYPE_NAME_FIELD_NAME = 'clientTypeName';
    static ARTICLE_TYPE_ID_FIELD_NAME = 'articleTypeId';
    static ARTICLE_TYPE_NAME_FIELD_NAME = 'articleTypeName';
    static CONTROL_INFO_FIELD_NAME = 'controlInfo';

    userId: number;
    userName: string;
    activityDataId: number;
    controlResponses: Array<ControlResponse>;
    projectId: number;
    activityName: string;
    start: Date;
    comments: string;
    reasonId: number;
    reasonName: string;
    clientTypeId: number;
    clientTypeName: string;
    articleTypeId: number;
    articleTypeName: string;
    controlInfo: ControlInfoData;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.controlResponses = new Array<ControlResponse>(); 
        this.controlInfo = new ControlInfoData(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.userId = rawValues.userId;
            this.userName = rawValues.userName;
            this.activityDataId = rawValues.activityDataId;
            this.fillModelArray<ControlResponse>(this, ActivityDataCloseModel.CONTROL_RESPONSES_FIELD_NAME, rawValues.controlResponses, useFormGroupValuesToModel, ControlResponse, SubTypeFactory.createSubTypeInstance);
            this.projectId = rawValues.projectId;
            this.activityName = rawValues.activityName;
            this.start = rawValues.start;
            this.comments = rawValues.comments;
            this.reasonId = rawValues.reasonId;
            this.reasonName = rawValues.reasonName;
            this.clientTypeId = rawValues.clientTypeId;
            this.clientTypeName = rawValues.clientTypeName;
            this.articleTypeId = rawValues.articleTypeId;
            this.articleTypeName = rawValues.articleTypeName;
            this.controlInfo.setValues(rawValues.controlInfo, useFormGroupValuesToModel);
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                userId: new FormControl(this.userId),
                userName: new FormControl(this.userName),
                activityDataId: new FormControl(this.activityDataId),
                controlResponses: new FormArray([]),
                projectId: new FormControl(this.projectId),
                activityName: new FormControl(this.activityName),
                start: new FormControl(this.start),
                comments: new FormControl(this.comments),
                reasonId: new FormControl(this.reasonId),
                reasonName: new FormControl(this.reasonName),
                clientTypeId: new FormControl(this.clientTypeId),
                clientTypeName: new FormControl(this.clientTypeName),
                articleTypeId: new FormControl(this.articleTypeId),
                articleTypeName: new FormControl(this.articleTypeName),
                controlInfo: this.controlInfo.$formGroup,
            });
            // generate FormArray control elements
            this.fillFormArray<ControlResponse>(ActivityDataCloseModel.CONTROL_RESPONSES_FIELD_NAME, this.controlResponses, ControlResponse);
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls[ActivityDataCloseModel.USER_ID_FIELD_NAME].setValue(this.userId);
        this.$formGroup.controls[ActivityDataCloseModel.USER_NAME_FIELD_NAME].setValue(this.userName);
        this.$formGroup.controls[ActivityDataCloseModel.ACTIVITY_DATA_ID_FIELD_NAME].setValue(this.activityDataId);
        this.fillFormArray<ControlResponse>(ActivityDataCloseModel.CONTROL_RESPONSES_FIELD_NAME, this.controlResponses, ControlResponse);
        this.$formGroup.controls[ActivityDataCloseModel.PROJECT_ID_FIELD_NAME].setValue(this.projectId);
        this.$formGroup.controls[ActivityDataCloseModel.ACTIVITY_NAME_FIELD_NAME].setValue(this.activityName);
        this.$formGroup.controls[ActivityDataCloseModel.START_FIELD_NAME].setValue(this.start);
        this.$formGroup.controls[ActivityDataCloseModel.COMMENTS_FIELD_NAME].setValue(this.comments);
        this.$formGroup.controls[ActivityDataCloseModel.REASON_ID_FIELD_NAME].setValue(this.reasonId);
        this.$formGroup.controls[ActivityDataCloseModel.REASON_NAME_FIELD_NAME].setValue(this.reasonName);
        this.$formGroup.controls[ActivityDataCloseModel.CLIENT_TYPE_ID_FIELD_NAME].setValue(this.clientTypeId);
        this.$formGroup.controls[ActivityDataCloseModel.CLIENT_TYPE_NAME_FIELD_NAME].setValue(this.clientTypeName);
        this.$formGroup.controls[ActivityDataCloseModel.ARTICLE_TYPE_ID_FIELD_NAME].setValue(this.articleTypeId);
        this.$formGroup.controls[ActivityDataCloseModel.ARTICLE_TYPE_NAME_FIELD_NAME].setValue(this.articleTypeName);
        this.controlInfo.setFormGroupValues();
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

