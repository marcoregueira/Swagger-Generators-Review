/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { ReasonItemModel } from './reason-item-model.model';

export interface IReasonModelList {
    reasons?: Array<ReasonItemModel>;
    showDeleted?: boolean;
    filter?: string;
    formAction?: string;
    itemsPerPage?: number;
    itemsCount?: number;
    pageIndex?: number;
    pageCount?: number;
    newSort?: string;
}


export class ReasonModelList extends BaseModel implements IReasonModelList  {

    static REASONS_FIELD_NAME = 'reasons';
    static SHOW_DELETED_FIELD_NAME = 'showDeleted';
    static FILTER_FIELD_NAME = 'filter';
    static FORM_ACTION_FIELD_NAME = 'formAction';
    static ITEMS_PER_PAGE_FIELD_NAME = 'itemsPerPage';
    static ITEMS_COUNT_FIELD_NAME = 'itemsCount';
    static PAGE_INDEX_FIELD_NAME = 'pageIndex';
    static PAGE_COUNT_FIELD_NAME = 'pageCount';
    static NEW_SORT_FIELD_NAME = 'newSort';

    reasons: Array<ReasonItemModel>;
    showDeleted: boolean;
    filter: string;
    formAction: string;
    itemsPerPage: number;
    itemsCount: number;
    pageIndex: number;
    pageCount: number;
    newSort: string;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.reasons = new Array<ReasonItemModel>(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.fillModelArray<ReasonItemModel>(this, ReasonModelList.REASONS_FIELD_NAME, rawValues.reasons, useFormGroupValuesToModel, ReasonItemModel, SubTypeFactory.createSubTypeInstance);
            this.showDeleted = rawValues.showDeleted;
            this.filter = rawValues.filter;
            this.formAction = rawValues.formAction;
            this.itemsPerPage = rawValues.itemsPerPage;
            this.itemsCount = rawValues.itemsCount;
            this.pageIndex = rawValues.pageIndex;
            this.pageCount = rawValues.pageCount;
            this.newSort = rawValues.newSort;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                reasons: new FormArray([]),
                showDeleted: new FormControl(this.showDeleted),
                filter: new FormControl(this.filter),
                formAction: new FormControl(this.formAction),
                itemsPerPage: new FormControl(this.itemsPerPage),
                itemsCount: new FormControl(this.itemsCount),
                pageIndex: new FormControl(this.pageIndex),
                pageCount: new FormControl(this.pageCount),
                newSort: new FormControl(this.newSort),
            });
            // generate FormArray control elements
            this.fillFormArray<ReasonItemModel>(ReasonModelList.REASONS_FIELD_NAME, this.reasons, ReasonItemModel);
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.fillFormArray<ReasonItemModel>(ReasonModelList.REASONS_FIELD_NAME, this.reasons, ReasonItemModel);
        this.$formGroup.controls[ReasonModelList.SHOW_DELETED_FIELD_NAME].setValue(this.showDeleted);
        this.$formGroup.controls[ReasonModelList.FILTER_FIELD_NAME].setValue(this.filter);
        this.$formGroup.controls[ReasonModelList.FORM_ACTION_FIELD_NAME].setValue(this.formAction);
        this.$formGroup.controls[ReasonModelList.ITEMS_PER_PAGE_FIELD_NAME].setValue(this.itemsPerPage);
        this.$formGroup.controls[ReasonModelList.ITEMS_COUNT_FIELD_NAME].setValue(this.itemsCount);
        this.$formGroup.controls[ReasonModelList.PAGE_INDEX_FIELD_NAME].setValue(this.pageIndex);
        this.$formGroup.controls[ReasonModelList.PAGE_COUNT_FIELD_NAME].setValue(this.pageCount);
        this.$formGroup.controls[ReasonModelList.NEW_SORT_FIELD_NAME].setValue(this.newSort);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

